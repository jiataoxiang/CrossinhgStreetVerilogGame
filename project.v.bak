
module project(
		CLOCK_50,						//	On Board 50 MHz
		// Your inputs and outputs here
      KEY,
      SW,
		// The ports below are for the VGA output.  Do not change.
		VGA_CLK,   						//	VGA Clock
		VGA_HS,							//	VGA H_SYNC
		VGA_VS,							//	VGA V_SYNC
		VGA_BLANK_N,						//	VGA BLANK
		VGA_SYNC_N,						//	VGA SYNC
		VGA_R,   						//	VGA Red[9:0]
		VGA_G,	 						//	VGA Green[9:0]
		VGA_B   						//	VGA Blue[9:0]
	   );
	input			CLOCK_50;				//	50 MHz
	input   [9:0]   SW;
	input   [3:0]   KEY;
	// Declare your inputs and outputs here

	// Do not change the following outputs
	output			VGA_CLK;   				//	VGA Clock      
	output			VGA_HS;					//	VGA H_SYNC
	output			VGA_VS;					//	VGA V_SYNC
	output			VGA_BLANK_N;				//	VGA BLANK
	output			VGA_SYNC_N;				//	VGA SYNC
	output	[9:0]	VGA_R;   				//	VGA Red[9:0]
	output	[9:0]	VGA_G;	 				//	VGA Green[9:0]
	output	[9:0]	VGA_B;  
	//	VGA Blue[9:0]
	wire resetn;
	
	assign resetn = KEY[0];
	// Create the colour, x, y and writeEn wires that are inputs to the controller.
	reg [2:0] colour;
	reg [7:0] x;
	reg [7:0] y;
	reg writeEn;
	wire enable,ld_c;



	// Create an Instance of a VGA controller - there can be only one!

	// Define the number of colours as well as the initial background

	// image file (.MIF) for the controller.

	vga_adapter VGA(
			.resetn(resetn),
			.clock(CLOCK_50),
			.colour(colour),
			.x(x),
			.y(y),
			.plot(writeEn),
			/* Signals for the DAC to drive the monitor. */
			.VGA_R(VGA_R),
			.VGA_G(VGA_G),
			.VGA_B(VGA_B),
			.VGA_HS(VGA_HS),
			.VGA_VS(VGA_VS),
			.VGA_BLANK(VGA_BLANK_N),
			.VGA_SYNC(VGA_SYNC_N),
			.VGA_CLK(VGA_CLK));
		defparam VGA.RESOLUTION = "160x120";
		defparam VGA.MONOCHROME = "FALSE";
		defparam VGA.BITS_PER_COLOUR_CHANNEL = 1;
		defparam VGA.BACKGROUND_IMAGE = "black.mif";
	// Put your code here. Your code should produce signals x,y,colour and writeEn/plot
	// for the VGA controller, in addition to any other functionality your design may require.
    wire colour1, colour2;
	 wire [7:0]x1,x2;
	 wire [6:0]y1,y2;
	 wire finish_F1,finish_F2;
	 wire writeEn1, writeEn2;
	 wire EN1,EN2;
	 
	 wire [1:0] mux;
    // Instansiate datapath
	// car1
      	car1 c1(
			.colour(SW[9:7]),
			.resetn(resetn),
			.clk(CLOCK_50),
			.EN(EN1),
			.plot(writeEn1),
			.finish_F1(finish_F1),
			.x(x1),
			.y(y1),
		   .colour_out(colour1));

    // car2
	   	car2 c2(
			.colour(SW[6:4]),
			.resetn(resetn),
			.clk(CLOCK_50),
			.EN(EN2),
			.plot(writeEn2),
			.finish_F2(finish_F2),
			.x(x2),
			.y(y2),
		   .colour_out(colour2));
		//bigFSM
		BIGFSM F1(
		.finish_F1(finish_F1), 
		.finish_F2(finish_F2),
		.clk(CLOCK_50),
		.resetn(resetn),
		.EN1(EN1), 
		.EN2(EN2),
		.mux(mux));
			
			always @(*)
			begin
				if (mux == 2'b10)begin
					writeEn = writeEn2;
					x = x2;
					y = y2;
					colour = colour2;
					end
				else if (mux == 2'b01)begin
					writeEn = writeEn1;
					x = x1;
					y = y1;
					colour = colour1;
					end
			end

endmodule

module BIGFSM (
		input finish_F1, finish_F2,clk,resetn,
		output reg EN1, EN2, 
		output reg [1:0] mux);
	
		
		reg [2:0]current_state,next_state;

	localparam  CAR1 = 3'd0,
			CAR2 = 3'd1;
					

	always @(*)
	begin: state_table
		case (current_state)
			CAR1: next_state = finish_F1 ? CAR2 : CAR1;
			CAR2: next_state = finish_F2 ?  CAR1: CAR2;
			default: next_state = CAR1;
		endcase
	end
	
	always @(*)
	begin: signals
		EN1 = 1'b0;
		EN2 = 1'b0;
		mux = 2'b00;
		case (current_state)
		CAR1: begin
			EN1 = 1'b1;
			mux = 2'b01;
			end
		CAR2: begin
			EN2 = 1'b1;
			mux = 2'b10;
			end
		endcase
	end
	
	
always@(posedge clk)
    begin: state_FFs
        if(!resetn)
            current_state <= CAR1;
        else
            current_state <= next_state;
    end // state_FFS
endmodule

module mux2to1(
	input x, y, sel,
	output out);
	
	assign out = (x & ~sel) | (y & sel); 

endmodule
