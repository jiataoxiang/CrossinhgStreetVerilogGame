module background(
		input resetn,clock,
		output plot,
		output reg [7:0]x,
		output reg [6:0]y,
		output [2:0]colour_out);
	wire h1,h2,v1,v2;
	wire x_h1, x_h2, x_v1, x_v2;
	wire y_h1, y_h2, y_v1, y_v2;
	wire finish_draw_h1, finish_draw_h2, finish_draw_v1,finish_draw_v2;
	//datapath
	datapath3 d0(
	.resetn(resetn), 
	.clock(clock),
	.h1(h1),.h2(h2),.v1(v1),.v2(v2),
	
	.x_h1(x_h1),.x_h2(x_h2),.x_v1(x_v1),.x_v2(x_v2),
	.y_h1(y_h1), .y_h2(y_h2), .y_v1(y_v1),.y_v2(y_v2),
	.colour_out(colour_out),.finish_draw_h1(finish_draw_h1), .finish_draw_h2(finish_draw_h2), 
	.finish_draw_v1(finish_draw_v1),.finish_draw_v2(finish_draw_v2));
	// assign colour
	
	wire enh1,enh2,env1,env2;
	//control
	FSM3 f0(
	.clock(clock), .resetn(resetn),
	.enh1(enh1), .enh2(enh2),.env1(env1),.env2(env2),.h1(h1),.h2(h2),.v1(v1),.v2(v2), .plot(plot),
	.finish_draw_h1(finish_draw_h1),.finish_draw_h2(finish_draw_h2),
	.finish_draw_v1(finish_draw_v1),.finish_draw_v2(finish_draw_v2));
	
	always @(*)
	begin
		if (enh1 == 1'b1)begin
			x = x_h1;
			y = y_h1;
			end
		else if (enh2 == 1'b1)begin
			x = x_h2;
			y = y_h2;
			end
		else if (env1 == 1'b1)begin
			x = x_v1;
			y = y_v1;
				end
		else if (env2 == 1'b1)begin
			x = x_v2;
			y = y_v2;
			end
			
	end
		
endmodule


module datapath3(
	input resetn, clock,
	input  h1,h2,v1,v2,
	
	output reg [7:0]x_h1,x_h2,x_v1,x_v2,
	output reg [6:0]y_h1, y_h2, y_v1,y_v2,
	output [2:0] colour_out,
	output finish_draw_h1, finish_draw_h2, finish_draw_v1,finish_draw_v2);
//assign colour
	assign colour_out = 3'b011;
	
// horizontal line
	always @(posedge clock)
	begin
		if (!resetn)begin
			x_h1 = 8'd25;
			y_h1 = 7'd25;
			end
		else if (x_h1 == 8'd135)
			x_h1 = 8'd25;
		else 
		begin
			if (h1 == 1'b1)
				x_h1 = x_h1 + 1'b1;
		end
	end
	assign finish_draw_h1 = (x_h1 == 8'd135)? 1 : 0;
	//horizontal line2
	always @(posedge clock)
	begin
		if (!resetn)begin
			x_h2 = 8'd25;
			y_h2 = 7'd95;
			end
		else if (x_h2 == 8'd135)
			x_h2 = 8'd25;
		else 
		begin
			if (h2 == 1'b1)
				x_h2 = x_h2 + 1'b1;
		end
	end
	assign finish_draw_h2 = (x_h2 == 8'd135)? 1 : 0;
	// vertical line
	always @(posedge clock)
	begin
		if (!resetn)begin
			x_v1 = 8'd25;
			y_v1 = 7'd25;
			end
		else if (y_v1 == 7'd95)
			y_v1 = 8'd25;
		else 
		begin
			if (v1 == 1'b1)
				y_v1 = y_v1 + 1'b1;
		end
	end
	assign finish_draw_v1 = (y_v1 == 7'd95)? 1:0;
	// vertical line2
	always @(posedge clock)
	begin
		if (!resetn)begin
			x_v2 = 8'd135;
			y_v2 = 7'd25;
			end
		else if (y_v2 == 8'd135)
			y_v2 = 8'd25;
		else 
		begin
			if (v2 == 1'b1)
				y_v2 = y_v2 + 1'b1;
		end
	end
	assign finish_draw_v2 = (y_v2 == 7'd95)? 1:0;

endmodule

module FSM3 (
	input clock, resetn,finish_draw_h1,finish_draw_h2,finish_draw_v1,finish_draw_v2,
	output reg enh1, enh2,env1,env2,h1,h2,v1,v2, plot);

reg [3:0] current_state, next_state;
	
	localparam DRAW_h1 = 4'd0,
				DRAW_h2 = 4'd1,
				DRAW_v1 = 4'd2,
				DRAW_v2 = 4'd3,
				WAIT = 4'd4;
					

	always @(*)
	begin: state_table
		case (current_state)
			DRAW_h1: next_state = finish_draw_h1? DRAW_h2 : DRAW_h1;
			DRAW_h2: next_state = finish_draw_h2? DRAW_v1 : DRAW_h2;
			DRAW_v1: next_state = finish_draw_v1? DRAW_v2 : DRAW_v1;
			DRAW_v2: next_state = finish_draw_v2? WAIT : DRAW_v2;
			WAIT: next_state = WAIT;
			default: next_state = DRAW_h1;
		endcase
	end
	
	always @(*)
	begin: signals
		plot = 1'b0;
		enh1 = 1'b0;
		enh2 = 1'b0;
		env1 = 1'b0;
		env2 = 1'b0;
		h1 = 1'b0;
		h2 = 1'b0;
		v1 = 1'b0;
		v2 = 1'b0;
		
		case (current_state)
		DRAW_h1:begin
			h1 = 1'b1;
			enh1 = 1'b1;
			plot = 1'b1;
		end
		DRAW_h2:begin
			h2 = 1'b1;
			enh2 = 1'b1;
			plot = 1'b1;
		end
		DRAW_v1:begin
			v1 = 1'b1;
			env1 = 1'b1;
			plot = 1'b1;
		end
		DRAW_v2:begin
			v2 = 1'b1;
			env2 = 1'b1;
			plot = 1'b1;
		end
		
		endcase
	end
	
	
always@(posedge clock)
    begin: state_FFs
        if(!resetn)
            current_state <= DRAW_h1;
        else
            current_state <= next_state;
    end // state_FFS
endmodule
